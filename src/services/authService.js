import api, { setAuthToken } from '../api/axios';

class AuthService {
  async login(token) {
    try {
      console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:', token);
      const response = await api.post('/auth/login', { token });
      console.log('üì® –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', response.data);
      
      if (response.data.requiresTelegramConfirmation) {
        if (!response.data.code) {
          throw new Error('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        }
        return this.waitForConfirmation(response.data.code);
      }
      
      return response.data;
    } catch (error) {
      console.error('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error.response?.data || error.message);
      throw error;
    }
  }

  async waitForConfirmation(code) {
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞:', code);
    
    const checkStatus = async () => {
      try {
        const response = await api.post('/auth/confirm', { code });
        console.log('üì° –°—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', response.data);

        if (response.data.token) {
          console.log('‚úÖ –í—Ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
          setAuthToken(response.data.token);
          return response.data;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å
        return new Promise((resolve) => {
          setTimeout(() => resolve(checkStatus()), 2000);
        });
      } catch (error) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –∫–∞–∫ "–∫–æ–¥ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
        if (error.response?.status === 400 || error.response?.status === 401) {
          console.log('‚è≥ –ö–æ–¥ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å...');
          return new Promise((resolve) => {
            setTimeout(() => resolve(checkStatus()), 2000);
          });
        }
        console.error('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error.response?.data || error.message);
        throw error;
      }
    };

    return checkStatus();
  }

  async getCurrentUser() {
    try {
      console.log('üë§ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
      const response = await api.get('/auth/me');
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', response.data);
      return response.data;
    } catch (error) {
      console.error('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error.response?.data || error.message);
      throw error;
    }
  }

  logout() {
    console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    setAuthToken(null);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  }
}

export default new AuthService(); 
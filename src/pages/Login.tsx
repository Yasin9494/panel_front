import React, { useState } from 'react';
import { Form, Input, Button, Card, message, Alert, Result } from 'antd';
import { useNavigate } from 'react-router-dom';
import { useAuthContext } from '../contexts/AuthContext';
import authService from '../services/authService';

const Login: React.FC = () => {
  const navigate = useNavigate();
  const { login } = useAuthContext();
  const [loading, setLoading] = useState(false);
  const [confirmationId, setConfirmationId] = useState<string | null>(null);

  const handleSubmit = async (values: { token: string }) => {
    try {
      setLoading(true);
      console.log('üéØ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞');
      const result = await authService.login(values.token);
      console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:', result);

      if (result.token && result.user) {
        console.log('üéâ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
        await login(result.token, result.user);
        message.success('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        navigate('/dashboard');
      } else {
        message.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
    } catch (error: any) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
      message.error(error.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
    } finally {
      setLoading(false);
    }
  };

  // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
  if (confirmationId) {
    return (
      <div style={{ 
        height: '100vh',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        background: '#f0f2f5'
      }}>
        <Result
          status="info"
          title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram"
          subTitle="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ –≤–∞—à–µ–º Telegram"
          extra={[
            <Button 
              key="cancel" 
              onClick={() => {
                console.log('üö´ –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞');
                setConfirmationId(null);
              }}
            >
              –û—Ç–º–µ–Ω–∏—Ç—å
            </Button>
          ]}
        />
      </div>
    );
  }

  return (
    <div style={{ 
      height: '100vh',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      background: '#f0f2f5'
    }}>
      <Card 
        title="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É" 
        style={{ 
          width: 400,
          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'
        }}
      >
        <Form
          name="login"
          onFinish={handleSubmit}
          layout="vertical"
        >
          <Form.Item
            name="token"
            label="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"
            rules={[
              { required: true, message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω' },
              { min: 32, message: '–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞' }
            ]}
          >
            <Input.Password 
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞" 
              size="large"
            />
          </Form.Item>

          <Form.Item>
            <Button 
              type="primary" 
              htmlType="submit" 
              loading={loading}
              block
              size="large"
            >
              –í–æ–π—Ç–∏
            </Button>
          </Form.Item>

          <Alert
            message="–í–∞–∂–Ω–æ"
            description="–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram"
            type="info"
            showIcon
          />
        </Form>
      </Card>
    </div>
  );
};

export default Login; 